class Solution {
public:
    bool isPrime(int no){
        if (no == 0 || no == 1) {
                return false;
        }
        for (int i = 2; i < no; i++) {
            if (no % i == 0) {
                    return false;
            }
        }
        return true;
    }
    vector<int> kthSmallestPrimeFraction(vector<int>& arr, int k) {
        //prime number vector
        vector<int>a;
        for(int i=0;i<arr.size();i++){
            if(isPrime(arr[i])){
             a.push_back(arr[i]);
            }
        }

         priority_queue<pair<double,pair<int,int>>,vector<pair<double,pair<int,int>>>,
         greater<pair<double,pair<int,int>>>>pq;

         for(int i=0;i<a.size();i++){
            for(int j=0;j<arr.size();j++){
                if(arr[j]!=a[i]){
                  pair<int,int>p=make_pair(arr[j],a[i]);
                  double res=arr[j]/(a[i]*1.0);
                  pair<double,pair<int,int>>p1=make_pair(res,p);
                  pq.push(p1);
                } 
            }
         }
        pair<double,pair<int,int>>m;
         vector<int>ans;
         while(!pq.empty() && k--){
            m=pq.top();
            pq.pop();
         }
         ans.push_back(m.second.first);
         ans.push_back(m.second.second);
        return ans;
    }
};
