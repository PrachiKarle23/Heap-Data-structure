//Approach 1-Time Limit Exceeded
class Solution {
public:
    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
        priority_queue<pair<int,vector<int>>>p;
        vector<vector<int>>a;
        int n=nums1.size(),m=nums2.size();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                vector<int>a={nums1[i],nums2[j]};
                int sum=nums1[i]+nums2[j];
                pair<int,vector<int>>p1=make_pair(sum,a);
                p.push(p1);
            }
        }
        vector<vector<int>>ans;
        while(p.size()!=k){
            p.pop();
        }

        while(!p.empty()){
            pair<int,vector<int>>p1=p.top();
            ans.push_back(p1.second);
            p.pop();
        }
        return ans;
    }
};

//approach 2
class Solution {
public:
    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
        vector<vector<int>>ans;
        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>
        ,greater<pair<int,pair<int,int>>>>p;
        int n=nums1.size(),m=nums2.size();

        for(int i=0;i<n;i++){
           p.push({nums1[i]+nums2[0],{i,0}});
        }
         
         while(!p.empty() && k--){
            pair<int, pair<int,int>>p1=p.top();
            int x=p1.second.first,y=p1.second.second;
            ans.push_back({nums1[x],nums2[y]});
            if(y!=m-1){
                p.push({nums1[x]+nums2[y+1],{x,y+1}});
            }
            p.pop();
         }
         return ans;
    }
};
