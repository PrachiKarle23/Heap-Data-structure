class Solution {
public:
    static bool cmp(vector<int>a,vector<int>b)
    {
        return a[1]<b[1];
    }
    int maxEvents(vector<vector<int>>& events) {

        sort(events.begin(),events.end(),cmp);
        for(int i=0;i<events.size();i++){
            cout<<events[i][0]<<" "<<events[i][1]<<", ";
        }
        int n=events.size();
        int last=events[n-1][1];
        vector<bool>visited(last+1,false);
        int cnt=0;
        
        for(int i=0;i<n;i++)
        {
            int a=events[i][0],b=events[i][1];
            for(int j=a;j<=b;j++)
            {
                if(!visited[j]){
                    visited[j]=true;
                    cnt++;
                    break;
                }
            }
        }
        return cnt;
    }
};


class Solution {
public:
    int maxEvents(vector<vector<int>>& events) {

        priority_queue<pair<int, int>, vector<pair<int, int>>,
                       greater<pair<int, int>>>
            pq;
        int n = events.size();
        for (int i = 0; i < n; i++) {
            pq.push(make_pair(events[i][1], events[i][0]));
        }
        int cnt=0;
        vector<int> visited;
        while (!pq.empty()) {
            auto top = pq.top();
            pq.pop();
            for (int i = top.second; i <= top.first; i++) {
                if (find(visited.begin(), visited.end(), i) == visited.end()) {
                    visited.push_back(i);
                    cnt++;
                    break;
                }
            }
        }
        return cnt;
    }
};
