class Solution {
public:
    int check(vector<int>a)
    {
        sort(a.begin(),a.end());
        return a[a.size()-1]-a[0];
    }
    int longestSubarray(vector<int>& nums, int limit) {
        int maxi=0;
        for(int i=0;i<nums.size();i++)
        {
            vector<int>a;
            for(int j=i;j<nums.size();j++)
            {
               a.push_back(nums[j]);
               int b=check(a);
               cout<<b<<" ";
               if(b<=limit)
               {
                  if(maxi<a.size())
                  {
                    maxi=a.size();
                  }
               }
            }
        }
        return maxi;
    }
};

class Solution {
public:
    int longestSubarray(vector<int>& nums, int limit) {
        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            int maxi = INT_MIN, mini = INT_MAX;
            for (int j = i; j < nums.size(); j++) {
                if (nums[j] > maxi) {
                    maxi = nums[j];
                }
                if (nums[j] < mini) {
                    mini = nums[j];
                }
                int b=maxi-mini;
                if (b <= limit) {
                    if (ans < j-i+1) {
                        ans = j-i+1;
                    }
                }
            }
        }
        return ans;
    }
};

class Solution {
public:
    int longestSubarray(vector<int>& nums, int limit) {
        int ans = 0;
        int i = 0, j = 0;
        deque<int> q;
        for (; j < nums.size(); j++) {
            q.push_back(nums[j]);
            int maxi = *max_element(q.begin(), q.end());
            int mini = *min_element(q.begin(), q.end());
            int a = maxi - mini;
            if (a > limit) {
                q.pop_front();
                i++;
            }
            if (a <= limit) {
                ans = max(ans, j - i + 1);
            }
        }
        return ans;
    }
};
