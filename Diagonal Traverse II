class Solution {
public:
    vector<int> findDiagonalOrder(vector<vector<int>>& nums) {

        vector<int>ans;
        map<int,vector<int>>m;

        for(int i=0;i<nums.size();i++)
        {
            for(int j=0;j<nums[i].size();j++)
            {
                m[i+j].push_back(nums[i][j]);
            }
        }

        for(auto i:m)
        {
           vector<int>a=m[i.first];
           for(int i=a.size()-1;i>=0;i--)
           {
             ans.push_back(a[i]);
           }
        }
        return ans;
    }
};

//heap
class Solution {
public:
    vector<int> findDiagonalOrder(vector<vector<int>>& nums) {
        vector<int>ans;
        priority_queue< pair<int,vector<int>>>pq;
        
        unordered_map<int,vector<int>>mp;
        for(int i=0;i<nums.size();i++)
        {
            for(int j=0;j<nums[i].size();j++)
            {
                mp[i+j].push_back(nums[i][j]);
            }
        }
        for(auto i:mp)
        {
            pq.push(make_pair(i.first,i.second));
        }

        while(!pq.empty())
        {
            pair<int,vector<int>>p=pq.top();
            for(int i=0;i<p.second.size();i++)
            {
                 ans.push_back(p.second[i]);   
            }
            pq.pop();
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
};
