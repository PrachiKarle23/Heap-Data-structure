//Approach 1
class Solution {
public:
    vector<string> findRelativeRanks(vector<int>& score) {
        int n=score.size();
        vector<int>sorted(score);
        sort(sorted.begin(),sorted.end());
        reverse(sorted.begin(),sorted.end());
        map<int,int>mp;
        for(int i=0;i<n;i++){
            mp[sorted[i]]=i+1;
        }

        vector<string>ans;

        for(int i=0;i<n;i++){
            if(mp[score[i]]==1){
                ans.push_back("Gold Medal");
            }
            else if(mp[score[i]]==2){
                ans.push_back("Silver Medal");
            }
            else if(mp[score[i]]==3){
                ans.push_back("Bronze Medal");
            }
            else {
                ans.push_back(to_string(mp[score[i]]));
            }
        }
        return ans;
    }
};

//Approach 2
class Solution {
public:
    vector<string> findRelativeRanks(vector<int>& score) {
        int n=score.size();
         priority_queue<int>pq;
         for(int i=0;i<n;i++){
            pq.push(score[i]);
         }
         map<int,int>mp;
         int i=1;
         while(!pq.empty())
         {
            mp[pq.top()]=i;
            i++;
            pq.pop();
         }
        vector<string>ans;
         for(int i=0;i<n;i++){
            if(mp[score[i]]==1){
                ans.push_back("Gold Medal");
            }
            else if(mp[score[i]]==2){
                ans.push_back("Silver Medal");
            }
            else if(mp[score[i]]==3){
                ans.push_back("Bronze Medal");
            }
            else{
                ans.push_back(to_string(mp[score[i]]));
            }
         }
         return ans;
    }
};
