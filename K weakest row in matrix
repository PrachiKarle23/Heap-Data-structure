class Solution {
public:
    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
        vector<int>ans;
        priority_queue<pair<int,int>>p;
        int n=mat.size(),m=mat[0].size();
        for(int i=0;i<n;i++)
        {
            int cnt=0;
            for(int j=0;j<m;j++){
                if(mat[i][j]==1){
                    cnt++;
                }
            }
            p.push(make_pair(cnt,i));
        }
        int size=p.size(),cnt=0;
        while(cnt!=size-k && !p.empty()){
            p.pop();
            cnt++;
        }

        while(!p.empty()){
            pair<int,int>p1=p.top();
            ans.push_back(p1.second);
            p.pop();
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
};
